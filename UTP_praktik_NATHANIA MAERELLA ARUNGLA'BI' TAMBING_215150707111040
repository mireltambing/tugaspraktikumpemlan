//NATHANIA MAERELLA ARUNGLA'BI' TAMBING
//215150707111040

//Admin
final class Admin {
    private String name;
    private String password;

    // Constructor
    public Admin(String name, String password){
        setName(name);
        setPassword(password);
    }

    // Basic Setters

    public void setName(String name) {
        this.name = name;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    // Basic Getters

    public String getName() {
        return name;
    }

    public String getPassword() {
        return password;
    }

    // To String return a formattet string of admin
    // Mengembalikan formatted string sesuai dengan contoh g
    public String toString() {
        return String.format("Name\t\t: %s \n", getName());
    }

    // Is match with Name and Password
    // Mengembalikan nilai perbandingan dari nama dan password dari suatu admin
    // Berhubungan dengan fungsi authentication pada "Helper.java"
    public boolean isMatch(String name, String password){
        if(name.equals(name) && password.equals(password)){
            return true;
        }
        else{
        return false;
        }
}
}

//Layanan
public class Layanan {
    private String name;
    private int price;
    private String description;

    // Constructor
    public Layanan(){}
    // Constructor
    public Layanan(String name, int price){
        setName(name);
        setPrice(price);
    }

    public Layanan(String name, int price, String description){
        setName(name);
        setPrice(price);
        setDescription(description);
    }

    // Basic Setter

    public void setName(String name){
        this.name =  name;
    }

    public void setPrice(int price){
        this.price = price;
    }

    public void setDescription(String description){
        this.description =  description;
    }

    // Basic Getters

    public String getName(){
        return name;
    }

    public int getPrice(){
        return price;
    }

    public String getDescription(){
        return description;
    }

    // Public helper getFormatted Price
    // Mengembalikan string dengan format misalkan Rp. 1,000
    // Lihat Fungsi getFormattedPrice pada Helper.java
    public String getFormattedPrice(){
        return  String.format("%s%,d", "Rp. ",getPrice() );
    }

    // To String return a formattet string of layanan
    // Mengembalikan string format yang bersesuaian dengan gambar pada lampiran
    public String toString(){
        return "formatted string untuk menjelaskan layanan";
    }
}    


//main
import java.util.Scanner;

class Main {

    // Daftar Admin
    static Admin[] admins = new Admin[2];

    // Daftar Layanan
    static Layanan[] layanans = new Layanan[5];

    // Daftar Antrian
    static Antrian[] antrians = new Antrian[10];

    // Scanner
    static final Scanner Sc = new Scanner(System.in);

    // Helper index in antrian
    static int indexAntrian;

    // Main Function
    public static void main(String args[]) {
        Helper.initialize();
        // Authentication
        boolean isAuthenticated = false;
        String username, password;
        do {
            System.out.println("Selamat datang pada laman login terminal sederhana!");
            System.out.printf("Username\t:");
            username = Sc.nextLine();
            System.out.printf("Password\t:");
            password = Sc.nextLine();
            isAuthenticated = Helper.authentication(username, password);
        } while (!isAuthenticated);

        // Menu terminal
        boolean loopMenu = true;
        do {
            System.out.println("Selamat datang pada aplikasi terminal sederhana!");
            System.out.println("Silakan pilih salah satu menu di bawah ini:");
            System.out.println("1. Menampilkan semua antrian pada hari ini");
            System.out.println("2. Menambahkan antrian");
            System.out.println("3. Log Out dari sistem");

            System.out.print("Masukan Anda: ");
            String choice = Sc.nextLine();
            switch (choice) {
                case "1":
                    showAllAntrian();
                    break;

                case "2":
                    addAnAntrian();
                    break;

                case "3":
                    loopMenu = false;
                    Sc.close();
                    break;
                default:
                    System.out
                            .println("Sistem menerima masukan yang tidak valid. Harap coba masukan angka yang tertera");
                    break;
            }
        } while (loopMenu);
    }

    // Function to showAllAntrian
    // Jangan diubah
    private static void showAllAntrian() {
        System.out
                .println("==========================================================================================");
        if (antrians[0] == null) {
            System.out.println("Tidak ada daftar layanan");
        }
        for (Antrian antrian : antrians) {
            if (antrian == null) {
                break;
            }

            // Print to string
            System.out.println(antrian.toString());
        }
        System.out
                .println("==========================================================================================");
    }

    // Function to addAnAtrian
    // Jangan diubah
    private static void addAnAntrian() {
        showAllLayanan();

        String name, phoneNumber, licenseNumber;
        System.out.printf("Masukan Nama Pemesan\t: ");
        name = Sc.nextLine();
        System.out.printf("Masukan Nomor Telepon\t: ");
        phoneNumber = Sc.nextLine();
        System.out.printf("Masukan Nomor Plat\t: ");
        licenseNumber = Sc.nextLine();
        // Add new antrian
        Antrian antrian = new Antrian(name, phoneNumber, licenseNumber);
        // indexAntrian++;
       

        // Dowhile
        boolean loopMenu = true;
        int indexAdd = 0;
        do {
            if (indexAdd == 3) {
                loopMenu = false;
                System.out.println("Mohon maaf, maksimum layanan per orang adalah 3 layanan");
                break;
            }
            System.out.print("Masukkan Nomor Layanan yang ingin ditambahkan: ");
            int nomorLayanan = Sc.nextInt();
            Sc.nextLine();
            antrian.addLayanan(layanans[(nomorLayanan - 1)]);

            System.out.println("Apakah Anda masih ingin menambahkan layanan? (y/n)");
            char lanjut = Sc.next().charAt(0);
            Sc.nextLine();

            switch (lanjut) {
                case 'y':
                    System.out.println("Silakan isi kembali!");
                    indexAdd++;
                    break;
                case 'n':
                    loopMenu = false;
                    break;

                default:
                    System.out.println("Masukan Anda tidak valid! Menghentikan menu memasukkan layanan.");
                    loopMenu = false;
                    break;
            }

        } while (loopMenu);
        antrians[indexAntrian] = antrian;
        indexAntrian++;
    }

    // Function to showAllLayanan
    // Jangan diubah
    private static void showAllLayanan() {
        System.out.println("Daftar Layanan");
        int index = 1;
        for (Layanan layanan : layanans) {
            if (layanan == null) {
                break;
            }

            // Print to string
            System.out.println("----------------------------------------------------------\n");
            System.out.printf("Layanan Nomor\t: %d\n", index);
            System.out.println(layanan.toString());
            System.out.println("----------------------------------------------------------\n");
            index++;
        }
    }
}

//Helper
public class Helper {

    // Helper to initialize
    static void initialize(){
        // Initilaize admin
        Main.admins[0] = new Admin("Joko", "ini_password_joko");
        Main.admins[1] = new Admin("Dengklek", "ini_password_dengklek");
        
        // Initialize Layanan
        // Masukkan daftar-daftar layanan bersesuaian dengan dokumen
        Main.layanans[0] = new Layanan("Ganti Oli", 500000);
        Main.layanans[1] = new Layanan("Operasi Mobil", 2000000);
        Main.layanans[2] = new Layanan("Ketok Magic", 3000000);
        Main.layanans[3] = new Layanan("Modifikasi Mobil Racing", 5000000);
        Main.layanans[4] = new Layanan("Modifikasi Mobil Elektrik", 5500000);
    } 

    // Helper function to authentication
    // Fungsi yang digunakan untuk "melakukan loop" pada iterasi admins
    static boolean authentication(String username, String password) {
        for(Admin admin : Main.admins)
        if(admin.isMatch(username, password)){
            return true;
        }
        
            return false;
        
      
    }

    // Helper to format price to rupiah
    static String getFormattedPrice(int price){
        return String.format("Rp. %,d", price);
    }
}

//Antrian
public class Antrian {
    private String name;
    private String phoneNumber;
    private String licenseNumber;
    private Layanan[] layanans;
    private int totalPrice;

    // Helper index in layanans
    private int indexLayanan;

    // Constructor
    public Antrian(String name, String phoneNumber, String licenseNumber){
        setName(name);
        setPhoneNumber(phoneNumber);
        setLicenseNumber(licenseNumber);
        this.indexLayanan = 0;
        setLayanans(new Layanan[3]);
        setTotalPrice(0);
    }

    // Basic Setter

    public void setName(String name){
        this.name =  name;
    }

    public void setPhoneNumber(String phoneNumber){
        this.phoneNumber =  phoneNumber;
    }

    public void setLicenseNumber(String licenseNumber){
        this.licenseNumber =  licenseNumber;
    }

    public void setLayanans(Layanan[] layanans){
        this.layanans = layanans;
    }

    public void setTotalPrice(int totalPrice){
        this.totalPrice = totalPrice;
    }

    // Basic Getters

    public String getName(){
        return name;
    }

    public String getPhoneNumber(){
        return phoneNumber;
    }
    
    public String getLicenseNumber(){
        return licenseNumber;
    }

    public Layanan[] getLayanan(){
        return layanans;
    }
    
    public int getTotalPrice(){
        return totalPrice;
    }

    // Public helper getFormatted Price
    // Ini nanti juga ditanyakan
    public String getFormattedPrice(){
        return Helper.getFormattedPrice(getTotalPrice());
    }

    // To String return a formattet string of layanan
    // Mengembalikan formatted string terhadap Antrian sesuai dengan gambar yang terlampir
    public String toString(){
        // Rubah Kode di sini
       String a = String.format("Name :%s\nPhone : %s\nLicense : %s\n", getName(), getPhoneNumber(), getLicenseNumber());
        a+= "Daftar Layanan  :\n";
        int i =1;
        for(Layanan layanan : layanans){
            if(layanan != null){
                a+= String.format("Nomor Layanan : %d\n", i);
                a+= layanan.toString();
                i++;
            }
        }
        a+= String.format("Total : %s\n", getFormattedPrice());
        return a;
    }

    // Helper untuk menambahkan layanan
    // Fungsi helper ketika akan menambahkan daftar layanan
    public void addLayanan(Layanan layanan){
        this.layanans[indexLayanan] = layanan;
        addTotalPrice(layanan.getPrice());
        indexLayanan++;
    }

    // Helper untuk menambahkan totalPrice
    // Fungsi helper ketika akan menambahkan totalPrice
    public void addTotalPrice(int layananPrice){
        totalPrice += layananPrice;
    }
}
